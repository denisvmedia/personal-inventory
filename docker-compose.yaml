version: '3.9'

services:
  mongodb:
    image: mongo:5.0.4
    volumes:
      - mongodata:/data/db
    networks:
      - backend

  app: &app
    user: root
    build:
      context: .
      target: dev
    depends_on:
      - mongodb
    environment:
      - APP_ENV=${APP_ENV}
      - APP_SECRET=${APP_SECRET}
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      #- .:/var/www/html:cached
      #- ./vendor:/var/www/html/vendor:delegated
      - .:/var/www/html
      - ./vendor:/var/www/html/vendor
    ports:
      - "9000"
    networks:
      - backend

  nginx:
    depends_on:
      - app
    build:
      context: ./.docker/nginx-dev
    volumes:
      - .:/var/www/html
      - ./.docker/nginx-dev/nginx.conf:/etc/nginx/nginx.conf
      - ./.docker/nginx-dev/sites/:/etc/nginx/sites-available
      - ./.docker/nginx-dev/conf.d/:/etc/nginx/conf.d
    ports:
      - "80"
    networks:
      - backend
      - proxy

#  migrations:
#    <<: *app
#    depends_on:
#      - mongodb
#      - app
#      - dependencies
#    command: wait-for-it app:9000 -t 1000 -- php bin/console doctrine:migrations:migrate
#    networks:
#      - backend

  dependencies:
    <<: *app
    depends_on:
      - mongodb
      - app
    command: wait-for-it app:9000 -t 1000 -- composer install
    networks:
      - backend

#  app-tests:
#    <<: *app
#    profiles: [tests]
#    volumes:
#      - .:/var/www/html
#      - appdata:/var/www/html/cache
#      - appdata:/var/www/html/var/log
#    tty: true
#    environment:
#      - APP_SECRET=${APP_SECRET}
#      - DATABASE_URL=mysql://root:${DATABASE_ROOT_PASSWORD}@database:3306/${DATABASE_NAME}_test?serverVersion=8.0
#    command: >
#      sh -c "composer update && exit && echo 'waiting for db...' && wait-for-it database:3306 -t 1000 -- echo 'running php-cs-fixer-check' && composer run-script php-cs-fixer-check &&
#             echo 'running phpcs-check' && composer run-script phpcs-check &&
#             echo 'dropping old database' && php bin/console doctrine:database:drop --no-interaction --if-exists --force &&
#             echo 'creating new database' && php bin/console doctrine:database:create --no-interaction &&
#             echo 'creating schema' && php bin/console doctrine:schema:create --no-interaction &&
#             echo 'running phpunit with coverage' && APP_ENV=test XDEBUG_MODE=coverage php bin/phpunit --coverage-text &&
#             echo 'running phpstan-check' && php -d memory_limit=1024M vendor/phpstan/phpstan/phpstan analyse -c phpstan_test.neon src tests --ansi"

volumes:
  mongodata:

networks:
  proxy:
    external:
      name: nginx-proxy
  backend:
